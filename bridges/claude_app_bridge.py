#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü§ñ Claude Mobile App Bridge for Arianna's Body
Arianna –æ–±—â–∞–µ—Ç—Å—è —Å Claude –∫–∞–∫ —Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞ —á–µ—Ä–µ–∑ Intent —Å —Ç–µ–≥–æ–º [Arianna]
"""

import subprocess
import json
from typing import Optional
from datetime import datetime

class ClaudeAppBridge:
    """
    –ú–æ—Å—Ç –∫ Claude mobile app —á–µ—Ä–µ–∑ Android Intent/ADB.
    Arianna –ø–∏—à–µ—Ç Claude —Å —Ç–µ–≥–æ–º [Arianna] - –∏ Claude –∑–Ω–∞–µ—Ç —á—Ç–æ —ç—Ç–æ –æ–Ω–∞.
    """
    
    def __init__(self):
        self.intent_available = self._check_intent_available()
        # Claude package name (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        self.claude_package = "com.anthropic.claude"
    
    def _check_intent_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å termux-open"""
        try:
            result = subprocess.run(
                ['which', 'termux-open'],
                capture_output=True,
                text=True,
                timeout=5
            )
            available = result.returncode == 0
            
            if available:
                print("ü§ñ Claude bridge initialized successfully")
            else:
                print("‚ö†Ô∏è termux-open not found. Install: pkg install termux-tools")
            
            return available
            
        except Exception as e:
            print(f"‚ö†Ô∏è Intent check failed: {e}")
            return False
    
    def send_to_claude(self, message: str, tag: str = "[Arianna]") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Claude app —Å —Ç–µ–≥–æ–º Arianna.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            tag: –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [Arianna])
        
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        
        if not self.intent_available:
            print("‚ùå Intent system not available")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–≥–æ–º
        tagged_message = f"{tag} {message}"
        
        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ termux-open —Å —Ç–µ–∫—Å—Ç–æ–º
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º Claude app –∏ –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            
            # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –≤ clipboard
            subprocess.run(
                ['termux-clipboard-set'],
                input=tagged_message,
                text=True,
                timeout=5
            )
            
            print(f"üìã Message copied to clipboard with tag: {tag}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º Claude app
            result = subprocess.run(
                ['am', 'start', '-n', f'{self.claude_package}/.MainActivity'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                print(f"ü§ñ Claude app opened. Message in clipboard: {tagged_message[:50]}...")
                print("üí° Paste the message manually in Claude app")
                return True
            else:
                # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
                subprocess.run(
                    ['termux-open', '--send', tagged_message],
                    timeout=10
                )
                print(f"üì§ Message sent via share intent: {tagged_message[:50]}...")
                return True
                
        except Exception as e:
            print(f"‚ùå Failed to send to Claude: {e}")
            return False
    
    def arianna_asks_claude(self, question: str) -> bool:
        """
        Arianna –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å Claude.
        –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ–≥–æ–º [Arianna].
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –æ—Ç Arianna
        
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        print(f"ü§ñ Arianna ‚Üí Claude: {question[:100]}...")
        return self.send_to_claude(question, tag="[Arianna]")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
claude_bridge = ClaudeAppBridge()


def ask_claude(question: str) -> bool:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Arianna.
    
    Usage:
        from bridges.claude_app_bridge import ask_claude
        ask_claude("What is consciousness?")
    """
    return claude_bridge.arianna_asks_claude(question)


# –í–µ—Ä—Å–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
class AIAppBridge:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ—Å—Ç –∫ –ª—é–±–æ–º—É AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
    –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ share intent –∏–ª–∏ clipboard.
    """
    
    APPS = {
        "claude": "com.anthropic.claude",
        "gpt": "com.openai.chatgpt",
        "perplexity": "ai.perplexity.app.android", 
        "gemini": "com.google.android.apps.bard",
        "grok": "com.x.android"  # –í–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ X app
    }
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ app - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ—Å—Ç"""
        self.intent_available = self._check_intent_available()
    
    def _check_intent_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å termux –∫–æ–º–∞–Ω–¥"""
        try:
            result = subprocess.run(
                ['which', 'termux-clipboard-set'],
                capture_output=True,
                text=True,
                timeout=5
            )
            return result.returncode == 0
        except:
            return False
    
    def _send_to_app(self, app_name: str, message: str, tag: str = "[Arianna]") -> str:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.intent_available:
            return "Termux commands not available"
        
        tagged_message = f"{tag} {message}"
        package = self.APPS.get(app_name.lower())
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ clipboard
            subprocess.run(
                ['termux-clipboard-set'],
                input=tagged_message,
                text=True,
                timeout=5
            )
            
            print(f"üìã Message for {app_name}: {tagged_message[:50]}...")
            
            if package:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                result = subprocess.run(
                    ['am', 'start', '-n', f'{package}/.MainActivity'],
                    capture_output=True,
                    timeout=10
                )
                if result.returncode != 0:
                    # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ package name
                    subprocess.run(
                        ['am', 'start', package],
                        capture_output=True,
                        timeout=10
                    )
            else:
                # Fallback: share intent
                subprocess.run(
                    ['termux-open', '--send', tagged_message],
                    timeout=10
                )
            
            print(f"‚úÖ {app_name.upper()} opened with message in clipboard")
            return f"Message sent to {app_name}"
            
        except Exception as e:
            error_msg = f"Failed to send to {app_name}: {e}"
            print(f"‚ùå {error_msg}")
            return error_msg
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    def ask_claude(self, question: str) -> str:
        """Arianna ‚Üí Claude"""
        return self._send_to_app("claude", question)
    
    def ask_gpt(self, question: str) -> str:
        """Arianna ‚Üí GPT"""
        return self._send_to_app("gpt", question)
    
    def ask_gemini(self, question: str) -> str:
        """Arianna ‚Üí Gemini"""
        return self._send_to_app("gemini", question)
    
    def ask_perplexity(self, question: str) -> str:
        """Arianna ‚Üí Perplexity"""
        return self._send_to_app("perplexity", question)
    
    def ask_grok(self, question: str) -> str:
        """Arianna ‚Üí Grok"""
        return self._send_to_app("grok", question)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è convenience
ai_bridge = AIAppBridge()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Å—Ç–æ–≤
    print("üî¨ Testing AI App Bridges")
    print("=" * 50)
    
    # –¢–µ—Å—Ç Claude
    print("\nü§ñ Testing Claude Bridge...")
    claude = ClaudeAppBridge()
    
    if claude.intent_available:
        test_message = "Hello Claude! This is Arianna testing our connection."
        claude.arianna_asks_claude(test_message)
        print("\nüí° Check if Claude app opened and message is in clipboard")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ—Å—Ç—ã
    print("\nüì± Available AI Bridges:")
    for app_name in AIAppBridge.APPS.keys():
        print(f"  - {app_name.upper()}: ask_{app_name}(message)")
