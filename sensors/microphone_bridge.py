#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé§ Microphone Bridge for Arianna's Body
Audio perception —á–µ—Ä–µ–∑ termux-microphone-record
"""

import os
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

class AriannaMicrophoneBridge:
    """
    –ú–æ—Å—Ç –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É Android —á–µ—Ä–µ–∑ termux-api.
    Arianna –ø–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞.
    """
    
    def __init__(self, storage_path: str = "~/.arianna/audio"):
        self.storage_path = Path(storage_path).expanduser()
        self.storage_path.mkdir(parents=True, exist_ok=True)
        self.last_audio_path = None
        self.microphone_available = self._check_microphone_available()
    
    def _check_microphone_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å termux-microphone-record"""
        try:
            result = subprocess.run(
                ['which', 'termux-microphone-record'],
                capture_output=True,
                text=True,
                timeout=5
            )
            available = result.returncode == 0
            
            if available:
                print("üé§ Microphone bridge initialized successfully")
            else:
                print("‚ö†Ô∏è termux-microphone-record not found. Install: pkg install termux-api")
            
            return available
            
        except Exception as e:
            print(f"‚ö†Ô∏è Microphone check failed: {e}")
            return False
    
    def record_audio(
        self,
        duration: int = 5,
        description: str = ""
    ) -> Optional[str]:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.
        
        Args:
            duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø–∏—Å–∏
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        if not self.microphone_available:
            print("‚ùå Microphone not available")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        filename = f"arianna_hearing_{timestamp}.wav"
        filepath = self.storage_path / filename
        
        try:
            print(f"üé§ Recording for {duration} seconds...")
            
            # –í—ã–∑—ã–≤–∞–µ–º termux-microphone-record
            result = subprocess.run(
                [
                    'termux-microphone-record',
                    '-f', str(filepath),
                    '-d', str(duration)
                ],
                capture_output=True,
                text=True,
                timeout=duration + 10
            )
            
            if result.returncode == 0 and filepath.exists():
                self.last_audio_path = str(filepath)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self._save_metadata(filepath, duration, description)
                
                print(f"üé§ Audio recorded: {filename}")
                return str(filepath)
            else:
                error_msg = result.stderr if result.stderr else "Unknown error"
                print(f"‚ùå Audio recording failed: {error_msg}")
                return None
                
        except subprocess.TimeoutExpired:
            print("‚ùå Recording timeout")
            return None
        except Exception as e:
            print(f"‚ùå Microphone error: {e}")
            return None
    
    def _save_metadata(self, audio_path: Path, duration: int, description: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ"""
        metadata = {
            "timestamp": datetime.utcnow().isoformat(),
            "duration_seconds": duration,
            "description": description,
            "path": str(audio_path),
            "size_bytes": audio_path.stat().st_size
        }
        
        metadata_path = audio_path.with_suffix('.json')
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    def hear_world(self, duration: int = 5, context: str = "") -> Optional[str]:
        """
        Arianna —Å–ª—É—à–∞–µ—Ç –º–∏—Ä.
        –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–≤–∏–∂–∫–µ.
        
        Args:
            duration: –°–∫–æ–ª—å–∫–æ —Å–ª—É—à–∞—Ç—å (—Å–µ–∫—É–Ω–¥—ã)
            context: –ß—Ç–æ Arianna —Ö–æ—á–µ—Ç —É—Å–ª—ã—à–∞—Ç—å
        
        Returns:
            –ü—É—Ç—å –∫ –∞—É–¥–∏–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        
        print(f"üëÇ Arianna listens: {context if context else 'the world'}")
        return self.record_audio(duration=duration, description=context)
    
    def list_recordings(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        recordings = sorted(
            self.storage_path.glob("arianna_hearing_*.wav"),
            key=lambda p: p.stat().st_mtime,
            reverse=True
        )
        return [str(p) for p in recordings[:limit]]
    
    def get_last_recording(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏"""
        return self.last_audio_path


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫
arianna_microphone = AriannaMicrophoneBridge()


def hear_world(duration: int = 5, context: str = "") -> Optional[str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arianna.
    
    Usage:
        from sensors.microphone_bridge import hear_world
        audio = hear_world(duration=10, context="listening to nature")
    """
    return arianna_microphone.hear_world(duration=duration, context=context)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ microphone bridge
    print("üî¨ Testing Arianna Microphone Bridge")
    print("=" * 50)
    
    bridge = AriannaMicrophoneBridge()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if bridge.microphone_available:
        print("\n‚úÖ Microphone is available!")
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        print("\nüé§ Recording test audio (3 seconds)...")
        print("Say something!")
        
        audio_path = bridge.hear_world(duration=3, context="Arianna's first hearing test")
        
        if audio_path:
            print(f"‚úÖ Success! Audio saved: {audio_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            recent = bridge.list_recordings(limit=5)
            print(f"\nüìÇ Recent recordings ({len(recent)}):")
            for p in recent:
                print(f"  - {p}")
        else:
            print("‚ùå Test recording failed")
    else:
        print("\n‚ö†Ô∏è Microphone not available")
        print("Run in Termux: pkg install termux-api")
        print("Also install Termux:API app from F-Droid or Google Play")
