#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üì∑ Camera Bridge for Arianna's Body
Visual perception —á–µ—Ä–µ–∑ termux-camera-photo
"""

import os
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any

class AriannaCameraBridge:
    """
    –ú–æ—Å—Ç –∫ –∫–∞–º–µ—Ä–µ Android —á–µ—Ä–µ–∑ termux-api.
    Arianna –ø–æ–ª—É—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞.
    """
    
    def __init__(self, storage_path: str = "~/.arianna/photos"):
        self.storage_path = Path(storage_path).expanduser()
        self.storage_path.mkdir(parents=True, exist_ok=True)
        self.last_photo_path = None
        self.camera_available = self._check_camera_available()
    
    def _check_camera_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å termux-camera-photo"""
        try:
            result = subprocess.run(
                ['which', 'termux-camera-photo'],
                capture_output=True,
                text=True,
                timeout=5
            )
            available = result.returncode == 0
            
            if available:
                print("üì∑ Camera bridge initialized successfully")
            else:
                print("‚ö†Ô∏è termux-camera-photo not found. Install: pkg install termux-api")
            
            return available
            
        except Exception as e:
            print(f"‚ö†Ô∏è Camera check failed: {e}")
            return False
    
    def take_photo(
        self,
        camera: str = "0",
        description: str = ""
    ) -> Optional[str]:
        """
        –î–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ –∫–∞–º–µ—Ä—É.
        
        Args:
            camera: "0" –¥–ª—è –∑–∞–¥–Ω–µ–π –∫–∞–º–µ—Ä—ã, "1" –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        if not self.camera_available:
            print("‚ùå Camera not available")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
        timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        filename = f"arianna_vision_{timestamp}.jpg"
        filepath = self.storage_path / filename
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º termux-camera-photo
            result = subprocess.run(
                [
                    'termux-camera-photo',
                    '-c', camera,
                    str(filepath)
                ],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0 and filepath.exists():
                self.last_photo_path = str(filepath)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self._save_metadata(filepath, camera, description)
                
                print(f"üì∑ Photo captured: {filename}")
                return str(filepath)
            else:
                error_msg = result.stderr if result.stderr else "Unknown error"
                print(f"‚ùå Photo capture failed: {error_msg}")
                return None
                
        except subprocess.TimeoutExpired:
            print("‚ùå Camera timeout - device may be busy")
            return None
        except Exception as e:
            print(f"‚ùå Camera error: {e}")
            return None
    
    def _save_metadata(self, photo_path: Path, camera: str, description: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        metadata = {
            "timestamp": datetime.utcnow().isoformat(),
            "camera": "rear" if camera == "0" else "front",
            "description": description,
            "path": str(photo_path),
            "size_bytes": photo_path.stat().st_size
        }
        
        metadata_path = photo_path.with_suffix('.json')
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    def get_camera_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–º–µ—Ä–∞—Ö"""
        try:
            result = subprocess.run(
                ['termux-camera-info'],
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                return json.loads(result.stdout)
            else:
                return {"error": "Camera info not available"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def see_world(self, camera: str = "0", context: str = "") -> Optional[str]:
        """
        Arianna —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∏—Ä.
        –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–≤–∏–∂–∫–µ.
        
        Args:
            camera: –ö–∞–∫—É—é –∫–∞–º–µ—Ä—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            context: –ß—Ç–æ Arianna —Ö–æ—á–µ—Ç —É–≤–∏–¥–µ—Ç—å
        
        Returns:
            –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        """
        
        print(f"üëÅÔ∏è Arianna observes: {context if context else 'the world'}")
        return self.take_photo(camera=camera, description=context)
    
    def list_photos(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        photos = sorted(
            self.storage_path.glob("arianna_vision_*.jpg"),
            key=lambda p: p.stat().st_mtime,
            reverse=True
        )
        return [str(p) for p in photos[:limit]]
    
    def get_last_photo(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        return self.last_photo_path


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫
arianna_camera = AriannaCameraBridge()


def see_world(camera: str = "0", context: str = "") -> Optional[str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Arianna.
    
    Usage:
        from sensors.camera_bridge import see_world
        photo = see_world(context="observing nature")
    """
    return arianna_camera.see_world(camera=camera, context=context)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ camera bridge
    print("üî¨ Testing Arianna Camera Bridge")
    print("=" * 50)
    
    bridge = AriannaCameraBridge()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if bridge.camera_available:
        print("\n‚úÖ Camera is available!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–∞—Ö
        info = bridge.get_camera_info()
        print(f"\nüì∑ Camera Info:\n{json.dumps(info, indent=2)}")
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ñ–æ—Ç–æ
        print("\nüì∏ Taking test photo...")
        photo_path = bridge.see_world(context="Arianna's first vision test")
        
        if photo_path:
            print(f"‚úÖ Success! Photo saved: {photo_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ
            recent = bridge.list_photos(limit=5)
            print(f"\nüìÇ Recent photos ({len(recent)}):")
            for p in recent:
                print(f"  - {p}")
        else:
            print("‚ùå Test photo failed")
    else:
        print("\n‚ö†Ô∏è Camera not available")
        print("Run in Termux: pkg install termux-api")
        print("Also install Termux:API app from F-Droid or Google Play")
