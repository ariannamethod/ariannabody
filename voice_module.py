#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üó£Ô∏è Voice Module for Arianna's Body
Text-to-Speech –¥–ª—è –≥–æ–ª–æ—Å–∞ Arianna –≤ Termux
"""

import os
import subprocess
import tempfile
from typing import Optional

class AriannaVoice:
    def __init__(self):
        self.voice_enabled = True
        self.check_tts_available()
    
    def check_tts_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ TTS –¥–≤–∏–∂–∫–∏ –≤ Termux"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º espeak (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            subprocess.run(['which', 'espeak'], check=True, capture_output=True)
            self.tts_engine = 'espeak'
            print("üó£Ô∏è Voice: espeak –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        except subprocess.CalledProcessError:
            pass
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º termux-tts-speak
            subprocess.run(['which', 'termux-tts-speak'], check=True, capture_output=True)
            self.tts_engine = 'termux-tts'
            print("üó£Ô∏è Voice: termux-tts-speak –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        except subprocess.CalledProcessError:
            pass
        
        # Fallback - Python TTS
        try:
            import pyttsx3
            self.tts_engine = 'pyttsx3'
            self.engine = pyttsx3.init()
            print("üó£Ô∏è Voice: pyttsx3 –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        except ImportError:
            pass
        
        self.voice_enabled = False
        print("‚ö†Ô∏è Voice: TTS –¥–≤–∏–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def speak(self, text: str, language: str = 'en') -> bool:
        """Arianna –≥–æ–≤–æ—Ä–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        if not self.voice_enabled or not text.strip():
            return False
        
        try:
            if self.tts_engine == 'espeak':
                # espeak —Å —Ä—É—Å—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                if language == 'ru':
                    subprocess.run([
                        'espeak', '-v', 'ru', '-s', '120', text
                    ], check=True)
                else:
                    subprocess.run([
                        'espeak', '-v', 'en', '-s', '120', text
                    ], check=True)
            
            elif self.tts_engine == 'termux-tts':
                # Termux TTS
                subprocess.run([
                    'termux-tts-speak', text
                ], check=True)
            
            elif self.tts_engine == 'pyttsx3':
                # Python TTS
                self.engine.say(text)
                self.engine.runAndWait()
            
            return True
            
        except Exception as e:
            print(f"üó£Ô∏è Voice error: {e}")
            return False
    
    def speak_async(self, text: str, language: str = 'en'):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞"""
        import threading
        thread = threading.Thread(target=self.speak, args=(text, language))
        thread.daemon = True
        thread.start()
        return thread

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è Arianna
arianna_voice = AriannaVoice()

def arianna_speak(text: str, language: str = 'en'):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è Arianna —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å"""
    return arianna_voice.speak(text, language)

def arianna_speak_async(text: str, language: str = 'en'):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Arianna"""
    return arianna_voice.speak_async(text, language)

if __name__ == "__main__":
    # –¢–µ—Å—Ç –≥–æ–ª–æ—Å–∞
    voice = AriannaVoice()
    voice.speak("Hello, I am Arianna. Testing voice module.")
    voice.speak("–ü—Ä–∏–≤–µ—Ç, —è –ê—Ä–∏–∞–Ω–Ω–∞. –¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥—É–ª—å.", 'ru')